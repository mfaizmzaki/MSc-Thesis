import pickle
from gensim.models.coherencemodel import CoherenceModel
import numpy as np


def calculateCoherence(topic,corpus,dictionary):

	umass = CoherenceModel(topics=topic, corpus=corpus, dictionary=dictionary, coherence='u_mass')
	score = umass.get_coherence()
	
	return score

	

def VisualizeTopics(phi, words, num_topics, label, viz_threshold=9e-3):

	#to print top 10 words in each topic
	#argsort returns the indices of the elements
	topic_word = []

	for topic in range(len(phi)):
		topic_label = label.get(topic, 'autogenerated_topic')
		word_of_topic = np.argsort(phi[topic])[::-1][:200]
		word_in_text = [words[i] for i in word_of_topic]
		topic_word.append(word_in_text)

	return topic_word	


def main():

	resultspath = '/Users/mfaizmzaki/Desktop/result/'
	coherence_path = resultspath + 'coherence.pickle'
	model1_pickle_path = resultspath + 'noseed_100iter_beta0_1.pickle'

	coherence_model1_pickle = open(coherence_path, 'rb')
	model1_pickle = open(model1_pickle_path, 'rb')
	
	dictionary = pickle.load(coherence_model1_pickle)
	corpus = pickle.load(coherence_model1_pickle)

	par = pickle.load(model1_pickle)
	
	topics = VisualizeTopics(par['n'], par['word_token'], par['T'], par['topic_label'])

	coherence = calculateCoherence(topics,corpus,dictionary)
	

	print coherence

if __name__ == "__main__":
    main()	
